clear all;
close all;
% verilen şekli tek hareketle çizmek
% genetik alg ile
% fitness1: en çok alan gezmesi  / gezebilecegi-gezdigi hucre sayisi
% fitness3: yön deðiþtirme mikta

% çizilecek şekil
sekil = [
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0;
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0;
    0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0;
    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0;
    0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0;
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0;
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1;
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0;
    0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0;
    0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0;
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
    ];

%{
sekil = [
    0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0;
    0,0,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,0,0;
    0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0;
    0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0;
    0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,0;
    0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,1,1,0,0,0;
    0,0,0,0,1,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0;
    0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0;
    0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0;
    0,0,0,0,1,1,0,1,0,1,1,0,0,0,1,0,0,0,0,0;
    0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0;
    0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0;
    0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0;
    0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0;
    0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,0,0,0;
    0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0;
    0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0;
]
sekil = [
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0;
    0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0;
    0,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,0,0,0,0;
    0,1,0,1,1,0,1,0,0,0,1,0,1,1,0,1,0,0,0,0;
    0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0;
    0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0;
    0,0,1,0,0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,0;
    0,0,1,0,0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,0;
    0,0,0,1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,0,0;
    0,0,1,0,0,1,0,0,0,1,1,1,0,0,1,0,0,1,0,0;
    0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0;
]


sekil = [
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0;
    0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0;
    0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0;
    0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0;
    0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0;
    0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0;
    0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
]


sekil = [
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0;
    0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0;
    1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0;
    0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0;
    1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0;
    0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0;
    0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0;
]


sekil = [
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0;
    0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0;
    0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0;
    0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0;
    0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0;
    0,1,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0;
    0,1,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0;
    0,0,0,1,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0;
    0,0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0;
    0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0;
]


sekil = [
    0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0;
    0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1;
    0,1,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,1;
    0,1,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,1;
    0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1;
    0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,1,0;
    0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0;
    0,0,0,0,0,1,0,1,0,0,1,0,1,0,1,0,0,0,0,0;
    0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,0;
    0,0,0,0,0,1,0,1,1,0,0,0,1,0,1,0,1,0,0,0;
    0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0;
    0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0;
    0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0;
    0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0;
    0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0;
];



sekil = [
    0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0;
    0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0;
    0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0;
    0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0;
    0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0;
    0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0;
    1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0;
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
    1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0;
    0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0;
    0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0;
    0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0;
    0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
];
sekil = [
    0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0;
    0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0;
    0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0;
    0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0;
    0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0;
    0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0;
    0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0;
    0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0;
    0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0;
]
sekil = [
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0;
    0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0;
    0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0;
    0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0;
    0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0;
    0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0;
    0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
]
sekil = [
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
];

sekil = [
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0;
    0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0;
    0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0;
    0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1;
    0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0;
    0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0;
    0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0;
    0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0;
    0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0;    
]
%}

% olasý hareketler [0 8] 0 olduðu yerde kalmasý 1-8 yönler
hareket = [0 0; 0 1; -1 1; -1 0; -1 -1; 0 -1; 1 -1; 1 0; 1 1];

% ardisik hareketler arasi maliyetler:
ac_t = 2:9;
ac = (ac_t - 2) * 45; ac = [0 ac]; % 0 0 45 90 135 180 225 270 315

Mx = size(sekil, 1); My = Mx; % ortam buyuklugu
P = 5000; % populasyon buyuklugu
ur = 2; % birey büyüklüğünün şekildeki piksel sayısına oranı
u = size(find(sekil), 1) * ur; % birey büyüklüğü
mu = 0.008; % mutasyon orani
G = 200; % nesil sayisi
cross = 2; % crossover 1: tek noktadan 2: cift noktadan
BK = P - P / 2; % sonraki nesle direkt kopyalanan en iyi birey sayisi

% Başlangıç noktasını otomatik sol alttan başlatmak için döngü
br = false; % tek kullanımlık değişken
for i = size(sekil, 1):-1:1

    for j = 1:size(sekil, 2)

        if sekil(i, j) == 1
            bas = [i j];
            br = true;
            break;
        end

    end

    if br == true
        break;
    end

end

max_f1 = u / ur + 1; % f1 maksium değeri
max_f3 = 180 * (u - 1); % f3 maksimum değeri
bb = zeros(1, G); %her nesilin en iyi bireyinin iyilik degerini tutar
ob = bb; % her neslin ortalama degerini tutar
tic
% ilk bireyleri uret
B = round(8 * rand(P, u)); % 0 8 arasi sayýlarla doldur

figure('Name','Generasyon En Iyisi')

for i = 1:G
    % bireylerin fitness larini hesapla
    f1 = zeros(1, P); f3 = f1; %f2=f1;

    for j = 1:P
        M = zeros(Mx, My); % ortamý 0 la
        birey = B(j, :); % popülasyondan birey seç
        % bireyin hareketini olustur
        kxy = bas;
        M(kxy(1), kxy(2)) = 1; % baslangýçta

        for k = 1:u
            p_kxy = kxy + hareket(birey(k) + 1, :); % hareketi olustur

            if p_kxy(1) < 1 || p_kxy(2) < 1 || p_kxy(1) > Mx || p_kxy(2) > Mx || sekil(p_kxy(1), p_kxy(2)) == 0 % şeklin ya da haritanın dışına cikarsa yerinde kalsin
            else % disari cikmadi hareket et
                kxy = p_kxy;
            end

            M(kxy(1), kxy(2)) = k + 1; % bireyin hareketini haritada işaretle
        end

        % path olustu
        f1(j) = u / ur - size(find(M), 1) + 1; % gezmedigi hucre sayisi
        % f3 yön değiştirme miktarı
        birey_arti = birey + 1;
        birey_2 = birey_arti(2:end);
        birey_1 = birey_arti(1:end - 1);
        a1 = ac(birey_1); a2 = ac(birey_2);
        fark = abs(a1 - a2);
        fark(fark > 180) = 360 - fark(fark > 180);
        f3(j) = sum(fark);
    end

    % fitness a göre seçim yap
    % f1 kucuk, f3 kucuk olsun istiyoruz
    n_f1 = f1 / max_f1; n_f3 = f3 / max_f3; % f1 ve f3 fonksiyonu normalizasyonu 
    w = power(n_f1, 0.8) + n_f3 * 0.5; % f1 ve f3 fonksiyonlarının genel değerlendirme ayarlanması
    n_w = w / 1.5; % n_w de minlerin secilme sansi yuksek olmalý
    n_w = 1 - n_w;
    % rulet tekeri
    [sorted, inds] = sort(n_w);
    [val, best_ind] = max(n_w);
    %best_ind
    bb(i) = n_w(best_ind);
    ob(i) = mean(n_w);
    secilenler = randsample(P, P, true, n_w);
    % yeni bireyleri üret % tek/cift noktali crossover
    YB = zeros(P, u); % yeni bireyler

    for j = 1:P / 2
        b1 = B(secilenler(j), :);
        b2 = B(secilenler(j + (P / 2)), :);

        if cross == 1 % tek noktalý crossover
            kesme = round((u - 3) * rand(1, 1)) + 2; % 2 - (u-1) arasi sayi
            YB(j, :) = [b1(1:kesme) b2(kesme + 1:end)];
            YB(j + (P / 2), :) = [b2(1:kesme) b1(kesme + 1:end)];
        else
            % cift noktalý crossover
            kesme = round((u - 3) * rand(1, 2)) + 2; % 2 - (u-1) arasi 2 sayi
            kesme = sort(kesme); % kucukten buyuge sirala
            YB(j, :) = [b1(1:kesme(1)) b2(kesme(1) + 1:kesme(2)) b1(kesme(2) + 1:end)];
            YB(j + (P / 2), :) = [b2(1:kesme(1)) b1(kesme(1) + 1:kesme(2)) b2(kesme(2) + 1:end)];
        end

    end

    if BK > 0 % B deki en iyi BK degeri YB ye kopyala
        YB(inds(BK + 1:end), :) = B(inds(BK + 1:end), :);
    end

    % mutasyon uygula
    d_ind = rand(P, u) < mu; % degisecek hucreler
    yy = round(8 * rand(P, u)); % nelerle degisecekleri
    YB(d_ind) = yy(d_ind);

    if BK > 0 % B deki en iyi BK degeri YB ye kopyala
        YB(inds(BK + 1:end), :) = B(inds(BK + 1:end), :);
    end

    B = YB; % yeni nesil hazir

    % jenerasyondaki en iyi bireyi ciz
    M = zeros(Mx, My); % ortamý 0 la
    %birey=round(8*rand(1,u));
    birey = B(best_ind, :);
    % bireyin hareketini olustur
    kxy = bas;
    M(kxy(1), kxy(2)) = 1; % baslangýçta
    rota = zeros(2, u);

    for k = 1:u
        p_kxy = kxy + hareket(birey(k) + 1, :); % hareketi olustur

        if p_kxy(1) < 1 || p_kxy(2) < 1 || p_kxy(1) > Mx || p_kxy(2) > Mx || sekil(p_kxy(1), p_kxy(2)) == 0 % şeklin ya da haritanın dışına cikarsa yerinde kalsin
        else % disari cikmadi hareket et
            kxy = p_kxy;
            M(kxy(1), kxy(2)) = k + 1;
        end

        rota(:, k) = kxy;
    end

    %birey % en iyi bireyi yazdýr
    bb(end) % son en bireyin degeri
    %M(son(1),son(2))=64;
    % path olustu
    image(M + 10);
    %figure;
    %plot(rota(1,:),rota(2,:));
    %axis([0 Mx+1 0 Mx+1]);
    %toc
    drawnow

end

f1 = figure;
figure(f1)
plot(bb); % en iyileri ciz
hold on;
plot(ob); % ortalamayý çiz

% en iyi bireyi ciz
M = zeros(Mx, My); % ortamý 0 la
%birey=round(8*rand(1,u));
birey = B(best_ind, :);
% bireyin hareketini olustur
kxy = bas;
M(kxy(1), kxy(2)) = 1; % baslangýçta
rota = zeros(2, u);

for k = 1:u
    p_kxy = kxy + hareket(birey(k) + 1, :); % hareketi olustur

    if p_kxy(1) < 1 || p_kxy(2) < 1 || p_kxy(1) > Mx || p_kxy(2) > Mx || sekil(p_kxy(1), p_kxy(2)) == 0 % şeklin ya da haritanın dışına cikarsa yerinde kalsin
    else % disari cikmadi hareket et
        kxy = p_kxy;
        M(kxy(1), kxy(2)) = k + 1;
    end

    rota(:, k) = kxy;
end

display(sekil);
%birey % en iyi bireyi yazıyor
bb(end) % son en bireyin degeri
%M(son(1),son(2))=64;
% path olustu
f2=figure('Name','Doğru Şekil');
sekil(sekil==1) = 125
figure(f2);image(sekil+5);
f3=figure;
figure(f3); plot(rota(1,:),rota(2,:));
axis([0 Mx+1 0 Mx+1]);
toc